{"version":3,"sources":["js/config.js","js/app-scripts.js","index.js","js/firebaseInit.js"],"names":["config","COOP","COEP","CORS","isAuthenticated","toggleComputeButton","predictionInput","document","getElementById","outputNeuronInput","querySelector","computeButton","value","trim","style","opacity","disabled","updateLinkButton","highlighted","querySelectorAll","linkButton","length","layer1","dataset","layer","layer2","ids","Array","from","map","h","id","pairId","concat","Math","min","max","existingLine","textContent","triggerCheckboxEvent","checkbox","event","Event","dispatchEvent","drawPermanentLines","inputGreenCircle","outputGreenCircle","inputTargetNeurons","outputTargetNeurons","forEach","circle","drawLineBetweenCircles","line","display","circle1","circle2","rect1","getBoundingClientRect","rect2","x1","left","width","y1","top","height","x2","y2","hypot","angle","atan2","PI","createElement","className","setAttribute","backgroundColor","position","transform","transformOrigin","body","appendChild","hidePopup","element","classList","contains","animation","addEventListener","remove","once","hideTooHigh","message","hideTooLow","showPopup","add","applyBonusToAllScores","bonus","completionCallback","scores","scoreElement","currentScore","parseInt","updateScoreInDB","closest","getAttribute","resizeText","box","clone","cloneNode","visibility","cloneWidth","offsetWidth","ratio","newFontSize","parseFloat","window","getComputedStyle","fontSize","removeChild","updateNeuronFills","neurons","maxScore","neuron","score","targetFillHeight","async","saveGameState","options","types","description","accept","inputOutputNeurons","line1","smallInput","largeInput","hiddenNeurons","line2","links","right","getLinks","data","handle","showSaveFilePicker","writableStream","createWritable","write","close","alert","err","console","error","loadGameState","fileHandle","showOpenFilePicker","file","getFile","lines","text","split","inputOutputLine","item","hiddenNeuronsLine","index","baseIndex","loadAllNeuronData","handleNeuronUpdate","neuronId","neuronElement","labelScoreElement","numberBoxSmallElement","numberBoxLargeElement","updateScore","isContentEditable","log","listenForNeuronChanges","db","ref","on","snapshot","val","updateNeuronDisplay","fillElement","undefined","large","small","fill","updateNeuronData","inputType","inputValue","warn","neuronRef","updates","update","then","catch","Object","keys","neuronData","newScore","handleCredentialResponse","response","credential","hideWelcomePopup","welcomePopup","setProperty","origin","location","closePopup4Button","mainContent","updateMainContentVisibility","signInButton","signOutButton","status","buttons","scoreRangeMax","enableElements","button","removeAttribute","input","disableElements","firebase","auth","signInWithPopup","GoogleAuthProvider","result","preventDefault","returnValue","opener","postMessage","code","signOut","showWelcomePopup","e","i","checkboxes","circles","this","circleId","checked","linkHandler","setupInteractions","h1Neurons","h2Neurons","h3Neurons","setupLinkPrevention","target","resetButton","confirm","setupGlobalClickListener","inputs","name","saveGameButton","loadGameButton","predictionValue","outputValue","isNaN","resultsHtml","neuronValue","neuronName","overallStatus","innerHTML","displayResults","updatePromises","Promise","all","setupInputListeners","increaseButtons","decreaseButtons","scoreId","setupScoreChangeListeners","resultPopup","popupHeader","closeButton","resizeHandle","onmousedown","shiftX","clientX","shiftY","clientY","movePopup","pageX","pageY","onMouseMove","onmouseup","removeEventListener","ondragstart","startX","startY","startWidth","defaultView","startHeight","setupResultsPopupListeners","resetTicksButton","setupResetTickboxesButton","maxScoreLabel","incrementButton","decrementButton","setupMaxScoreButtons","settingsIcon","buttonsToToggle","setTimeout","setupSettingButton","MutationObserver","mutations","mutation","type","observe","characterData","childList","subtree","onAuthStateChanged","user","displayName","checkAuthState","google","accounts","initialize","client_id","callback","use_fedcm_for_prompt","prompt","firebaseReady","OneTapLogin","login","useGoogleLogin","onSuccess","tokenResponse","onError","errorResponse","ux_mode","_jsx","onClick","children","App","GoogleOAuthProvider","clientId","ReactDOM","render","onload","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","database","firebaseReadyEvent","PublicKeyCredential","navigator","credentials","get","mediation","federated","providers","url","assertionResponse","credentialId","signInWithCredential","getIdToken","token","userId","currentUser","uid"],"mappings":"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","file":"static/js/main.35fb7687.chunk.js","sourcesContent":["\n// Configuration settings\nconst config = {\n    COOP: 'same-origin-allow-popups',\n    COEP: 'require-corp',\n    CORS: 'https://manders-jones.eu'\n};\n\n// Apply configuration dynamically\nexport function applyConfig() {\n    console.log('config.js loaded:', config);\n    // Additional logic to manipulate DOM or set conditions based on config\n}","/* global google */\n/* global firebase */\n\nimport { applyConfig } from './config.js';\nimport './firebaseInit.js';\n\nlet show_main_content = true; // Change to false to hide content\nlet isAuthenticated = false; // Track authentication state\nlet enableElementsGlobally = true; // Change to true to enable elements globally\n\n\n\n\nwindow.addEventListener('message', function(event) {\n    if (event.origin !== window.location.origin) {\n        // Ignore messages from unexpected origins for security\n        return;\n    }\n    if (event.data === 'popupClosed') {\n        console.log('The popup window has closed');\n        // Additional handling after the popup closes\n    }\n});\n\ndocument.addEventListener('DOMContentLoaded', function () {\n    console.log(\"Page loaded\");\n\n    applyConfig(); // Apply cross-domain policies\n\n    const closePopup4Button = document.getElementById('close-popup4');\n    if (closePopup4Button) {\n        closePopup4Button.addEventListener('click', function () {\n            hideWelcomePopup(); // Use the existing function to hide the popup\n        });\n    }\n\n    const mainContent = document.getElementById('main-content');\n\n    function updateMainContentVisibility() {\n        const mainContent = document.getElementById('main-content');\n        if (show_main_content) {\n            mainContent.style.display = 'block';\n            drawPermanentLines(); // Ensure lines are drawn when content is visible\n        } else {\n            mainContent.style.display = 'none';\n        }\n    }\n\n    // Initial call to set visibility based on the global variable\n    updateMainContentVisibility();\n\n    document.addEventListener('firebaseReady', function () {\n        console.log(\"Firebase is ready\");\n\n        const signInButton = document.getElementById('sign-in');\n        const signOutButton = document.getElementById('sign-out');\n        const status = document.getElementById('sign-in-status');\n        const buttons = document.querySelectorAll('.toolbar button, .score-scale-container button');\n        const scoreRangeMax = document.getElementById('score-range-max');\n\n        const enableElements = () => {\n            if (enableElementsGlobally) {\n                buttons.forEach(button => {\n                    button.classList.remove('disabled');\n                    button.disabled = false;\n                });\n                scoreRangeMax.classList.remove('disabled');\n                scoreRangeMax.removeAttribute('disabled');\n                document.querySelectorAll('.number-box.small').forEach(input => {\n                    input.disabled = false;\n                });\n            }\n        };\n\n        const disableElements = () => {\n            if (!enableElementsGlobally) {\n                buttons.forEach(button => {\n                    button.classList.add('disabled');\n                    button.disabled = true;\n                });\n                scoreRangeMax.classList.add('disabled');\n                scoreRangeMax.setAttribute('disabled', 'disabled');\n                document.querySelectorAll('.number-box.small').forEach(input => {\n                    input.disabled = true;\n                });\n            }\n        };\n\n        // Initial state - enable or disable buttons based on the global variable\n        if (enableElementsGlobally) {\n            enableElements();\n        } else {\n            disableElements();\n        }\n\n        signInButton.addEventListener('click', () => {\n            firebase.auth().signInWithPopup(new firebase.auth.GoogleAuthProvider())\n            .then(result => {\n                hideWelcomePopup();\n                enableElements();\n                isAuthenticated = true;\n                loadAllNeuronData();\n        \n                window.addEventListener('beforeunload', function(event) {\n                    event.preventDefault();\n                    event.returnValue = '';\n                    if (window.opener) {\n                        window.opener.postMessage('popupClosed', window.opener.location.origin);\n                    }\n                });\n            })\n            .catch(error => {\n                if (error.code === 'auth/popup-closed-by-user') {\n                    alert('Sign-in was not completed because the popup was closed. Please try again.');\n                } else {\n                    alert('Failed to sign in. Please try again.');\n                }\n            });\n        });\n\n        signOutButton.addEventListener('click', () => {\n            firebase.auth().signOut()\n                .then(() => {\n                    status.textContent = 'Signed out';\n                    signInButton.style.display = 'block';\n                    signOutButton.style.display = 'none';\n                    mainContent.style.display = 'none';\n                    showWelcomePopup(); // Show the welcome popup after signing out\n                    disableElements(); // Disable elements after sign out\n                    isAuthenticated = false; // Set authenticated to false\n                })\n                .catch(error => {\n                    console.error('Error signing out:', error);\n                    status.textContent = `Sign-out failed: ${error.message}`;\n                });\n        });\n\n        console.log(\"SETTING setupInteractions\");\n        setupInteractions();\n\n        console.log(\"SETTING UP drawPermanentLines\");\n        drawPermanentLines();\n\n        console.log(\"SETTING UP setupLinkPrevention\");\n        setupLinkPrevention();\n\n        console.log(\"SETTING UP updateLinkButton\");\n        updateLinkButton();\n\n        console.log(\"SETTING UP setupGlobalClickListener\");\n        setupGlobalClickListener();\n\n        console.log(\"SETTING UP setupInputListeners\");\n        setupInputListeners();\n\n        console.log(\"SETTING UP setupScoreChangeListeners\");\n        setupScoreChangeListeners();\n\n        console.log(\"SETTING UP setupBonusListeners\");\n        setupBonusListeners();\n\n        console.log(\"SETTING UP setupResultsPopupListeners\");\n        setupResultsPopupListeners();\n\n        console.log(\"SETTING UP setupResetTickboxesButton\");\n        setupResetTickboxesButton();\n\n        console.log(\"SETTING UP setupMaxScoreButtons\");\n        setupMaxScoreButtons();\n\n        console.log(\"SETTING UP setupSettingButton\");\n        setupSettingButton();\n\n        console.log(\"SETTING UP setupNeuronListeners\");\n        setupNeuronListeners();\n\n        console.log(\"SETTING UP loadAllNeuronData\");\n        loadAllNeuronData();\n\n        console.log(\"SETTING UP updateNeuronFills\");\n        updateNeuronFills();\n\n        console.log(\"CHECKING AUTH STATE\");\n        checkAuthState();\n\n        console.log(\"****************FINISHED DOM LOAD***************\");\n    });\n\n    document.addEventListener('gisLoaded', function () {\n        console.log(\"Google Identity Services library is ready\");\n        try {\n            initializeFedCM();\n        } \n        catch (error) {\n            console.error(\"Error initializing FedCM:\", error);\n        }\n    });\n\n    if (!window.firebaseReady) {\n        console.error('Firebase not ready.');\n    }\n\n});\n\n\nfunction setupInputListeners() {\n\n    console.log(\"Setting up input listeners...\");\n\n    const inputs = document.querySelectorAll('.number-box');\n    console.log(`Found ${inputs.length} input elements`);\n\n    inputs.forEach(input => {\n        console.log(`Setting listener for input: ${input.name || input.id}`);\n        input.addEventListener('input', function () {\n            const neuronId = this.closest('.circle').getAttribute('data-id');\n            handleNeuronUpdate(neuronId);\n            if (isAuthenticated) {\n                updateNeuronFills(); // Ensure fill updates after input changes\n            } else {\n                updateNeuronFills();\n            }       \n        });\n    });\n\n    const saveGameButton = document.getElementById('save-game');\n    if (saveGameButton) {\n        saveGameButton.addEventListener('click', saveGameState);\n    }\n\n    const loadGameButton = document.getElementById('load-game');\n    if (loadGameButton) {\n        loadGameButton.addEventListener('click', loadGameState);\n    }\n\n    const predictionInput = document.getElementById('predictionInput');\n    const outputNeuronInput = document.querySelector('.circle.green:last-child .number-box.large');\n    const computeButton = document.querySelector('button[name=\"compute\"]');\n\n    //enforce initial state, if values loaded from db.\n    if (predictionInput && outputNeuronInput) {\n        toggleComputeButton();\n    }\n\n    //listening for io changes to toggle compute button visiblity\n    predictionInput.addEventListener('input', toggleComputeButton());\n    outputNeuronInput.addEventListener('input', toggleComputeButton());\n\n    //Event listener for computer button clicked\n    computeButton.addEventListener('click', function () {\n\n        //console.log('Compute button clicked');\n        const predictionValue = parseFloat(predictionInput.value);\n        const outputValue = parseFloat(outputNeuronInput.value);\n\n        if (!predictionInput || !outputNeuronInput) {\n            return;\n        }\n\n        if (isNaN(predictionValue) || isNaN(outputValue)) {\n            return;\n        }\n\n        // Too high\n        if (outputValue > predictionValue) {\n            document.querySelectorAll('.circle.hidden-layer').forEach(neuron => {\n                const neuronValue = parseFloat(neuron.querySelector('.number-box.large').value);\n                if (neuronValue < outputValue) {\n                    const checkbox = neuron.querySelector('input[type=\"checkbox\"]');\n                    checkbox.checked = true; // Show them\n                    triggerCheckboxEvent(checkbox);\n                }\n            });\n        }\n\n        // Too low\n        if (outputValue < predictionValue) {\n            document.querySelectorAll('.circle.hidden-layer').forEach(neuron => {\n                const neuronValue = parseFloat(neuron.querySelector('.number-box.large').value);\n                if (neuronValue > outputValue) {\n                    const checkbox = neuron.querySelector('input[type=\"checkbox\"]');\n                    checkbox.checked = true; // Show them\n                    triggerCheckboxEvent(checkbox);\n                }\n            });\n        }\n\n        if (isAuthenticated) {\n            displayResults();\n        }\n    });\n\n\n    document.querySelectorAll('.score').forEach(scoreElement => {\n        scoreElement.addEventListener('input', function () {\n            const neuronId = this.closest('.circle').getAttribute('data-id');\n            handleNeuronUpdate(neuronId);\n            if (isAuthenticated) {\n                const scoreValue = parseInt(this.textContent) || 0;\n                updateScoreInDB(neuronId, scoreValue);\n            }\n        });\n    });\n\n\n    document.getElementById('reset-scores').addEventListener('click', function () {\n        if (isAuthenticated && window.confirm('Are you sure you want to reset all scores?\\nThis action cannot be undone.')) {\n            const neurons = Array.from(document.querySelectorAll('.circle')); // Convert NodeList to an array\n            //const db = firebase.database();\n\n            const updatePromises = neurons.map(neuron => {\n                const neuronId = neuron.getAttribute('data-id');\n                const neuronRef = window.db.ref('neurons/' + neuronId);\n                return neuronRef.update({ score: '0', fill: '0' });  // Reset score and fill to zero\n            });\n\n            Promise.all(updatePromises)\n                .then(() => {\n                    console.log('All scores reset successfully');\n                    neurons.forEach(neuron => {\n                        const scoreElement = neuron.querySelector('.score');\n                        scoreElement.textContent = '0'; // Reset the score text immediately\n\n                        // Reset fill height in the UI immediately\n                        const fillElement = neuron.querySelector('.fill');\n                        if (fillElement) {\n                            fillElement.style.height = '0%';\n                        }\n                    });\n                    // Call updateNeuronFills to ensure UI reflects the changes\n                    updateNeuronFills();\n                })\n                .catch(error => {\n                    console.error('Error resetting scores:', error);\n                });\n        } else {\n                window.alert('You must be logged in and in a group session to reset scores.')\n                console.log('Reset scores cancelled');\n        }\n    });\n}\n\n\n\nfunction setupInteractions() {\n\n    document.addEventListener('touchmove', function (e) { e.preventDefault(); }, false);\n\n    for (let i = 1; i <= 11; i++) {\n        listenForNeuronChanges('neuron' + i);\n    }\n\n    window.addEventListener('resize', resizeText);\n    window.addEventListener('load', resizeText);\n\n    document.querySelectorAll('.circle[data-id=\"2\"], .circle[data-id=\"5\"], .circle[data-id=\"8\"]').forEach(circle => {\n        circle.addEventListener('mouseenter', () => showPopup(document.querySelector('.popup')));\n        circle.addEventListener('mouseleave', () => hidePopup(document.querySelector('.popup')));\n    });\n\n    document.querySelectorAll('.circle[data-id=\"3\"], .circle[data-id=\"6\"], .circle[data-id=\"9\"], .circle[data-id=\"4\"], .circle[data-id=\"7\"], .circle[data-id=\"10\"]').forEach(circle => {\n        circle.addEventListener('mouseenter', () => showPopup(document.querySelector('.popup2')));\n        circle.addEventListener('mouseleave', () => hidePopup(document.querySelector('.popup2')));\n    });\n\n    document.querySelectorAll('.circle[data-id=\"11\"]').forEach(circle => {\n        circle.addEventListener('mouseenter', () => showPopup(document.querySelector('.popup3')));\n        circle.addEventListener('mouseleave', () => hidePopup(document.querySelector('.popup3')));\n    });\n\n    document.querySelectorAll('.circle[data-id=\"1\"]').forEach(circle => {\n        circle.addEventListener('mouseenter', () => showPopup(document.querySelector('.popup1')));\n        circle.addEventListener('mouseleave', () => hidePopup(document.querySelector('.popup1')));\n    });\n\n    //const resultMessage = document.querySelector('.result-label');\n    const linkButton = document.getElementById('linkButton');\n    const checkboxes = document.querySelectorAll('.checkbox');\n    const circles = document.querySelectorAll('.circle');\n\n    checkboxes.forEach(checkbox => {\n        checkbox.addEventListener('change', function () {\n            const circle = this.closest('.circle');\n            const circleId = circle.getAttribute('data-id');\n            circle.style.opacity = this.checked ? '0.3' : '1.0';\n            const lines = document.querySelectorAll(`.line[data-pair-id*='${circleId}-'], .line[data-pair-id*='-${circleId}']`);\n            lines.forEach(line => line.style.opacity = this.checked ? '0' : '1.0');\n        });\n    });\n\n    circles.forEach(circle => {\n        circle.addEventListener('click', function () {\n            if (this.classList.contains('green')) {\n                //console.log('Selection of green or hidden layer circles is disabled.');\n                return;\n            }\n\n\n            if (this.classList.contains('highlighted')) {\n                this.classList.remove('highlighted');\n            } else if (document.querySelectorAll('.circle.highlighted').length < 2) {\n                this.classList.add('highlighted');\n            }\n\n\n            updateLinkButton(); // Update the link button whenever a circle is clicked\n        });\n    });\n\n    linkButton.addEventListener('click', () => {\n        linkHandler();\n    });\n\n}\n\nfunction setupGlobalClickListener() {\n\n    // Global click to hide messages\n    document.addEventListener('click', function (e) {\n        if (!e.target.closest('.no-hide-on-click, .result-label, .popup')) {\n            hideTooHigh();\n            hideTooLow();\n        }\n    });\n\n    const resetButton = document.getElementById('reset');\n    if (resetButton) {\n        resetButton.addEventListener('click', function () {\n            //console.log('Reset button clicked');\n            // Confirm before resetting\n            if (window.confirm(\"Are you sure you want to reset all settings\\nand clear all connections?\")) {\n                resetNeuralNetwork();\n                initializeNeuronDataInDB();\n            }\n\n        });\n    }\n\n\n    document.addEventListener('click', function (event) {\n        if (!event.target.closest('.no-hide-on-click, .result-label')) {\n            hideTooHigh();\n            hideTooLow();\n        }\n    });\n}\n\nfunction resetNeuralNetwork() {\n    // Reset logic goes here\n    // Example: Clear all inputs, uncheck checkboxes, and reset any displayed messages or states\n    document.querySelectorAll('.hidden-layer .number-box.large').forEach(input => {\n        input.value = ''; // Clears all text and password inputs\n    });\n\n    document.querySelectorAll('input[type=\"checkbox\"]').forEach(checkbox => {\n        checkbox.checked = false; // Unchecks all checkboxes\n        triggerCheckboxEvent(checkbox);\n    });\n\n    // Remove links\n    document.querySelectorAll('.line').forEach(line => {\n        line.remove(); // Assuming 'line' elements are used to show connections\n        drawPermanentLines();\n    });\n\n    //deselect any circles\n    document.querySelectorAll('.circle.highlighted').forEach(circle => {\n        circle.classList.remove('highlighted');\n    });\n\n    hideTooHigh(); // Hide any messages if previously displayed\n    hideTooLow();\n    //console.log('Neural network has been reset');\n}\n\nfunction setupLinkPrevention() {\n    // Assign a 'layer' data attribute to each neuron to identify which layer they belong to.\n    const h1Neurons = document.querySelectorAll('.circle.hidden-layer[data-id=\"2\"], .circle.hidden-layer[data-id=\"5\"], .circle.hidden-layer[data-id=\"8\"]');\n    const h2Neurons = document.querySelectorAll('.circle.hidden-layer[data-id=\"3\"], .circle.hidden-layer[data-id=\"6\"], .circle.hidden-layer[data-id=\"9\"]');\n    const h3Neurons = document.querySelectorAll('.circle.hidden-layer[data-id=\"4\"], .circle.hidden-layer[data-id=\"7\"], .circle.hidden-layer[data-id=\"10\"]');\n\n    h1Neurons.forEach(neuron => {\n        neuron.dataset.layer = 'h1'; // Assigning layer identifiers\n    });\n    h2Neurons.forEach(neuron => {\n        neuron.dataset.layer = 'h2';\n    });\n    h3Neurons.forEach(neuron => {\n        neuron.dataset.layer = 'h3';\n    });\n}\n\nfunction linkHandler() {\n    const highlighted = Array.from(document.querySelectorAll('.circle.highlighted'));\n    if (highlighted.length === 2) {\n        const layer1 = highlighted[0].dataset.layer;\n        const layer2 = highlighted[1].dataset.layer;\n\n\n        // Only link if neurons are from different layers\n        if (layer1 !== layer2) {\n            const ids = highlighted.map(circle => circle.dataset.id);\n            const pairId = `${Math.min(...ids)}-${Math.max(...ids)}`;\n            let existingLine = document.querySelector(`.line[data-pair-id=\"${pairId}\"]`);\n\n\n            if (existingLine) {\n                existingLine.remove(); // Remove the line if it exists\n            } else {\n                drawLineBetweenCircles(highlighted[0], highlighted[1], pairId);\n            }\n        } else {\n            //console.log('Linking within the same layer is not allowed.');\n        }\n\n        // Reset highlighting after attempting to link\n        highlighted.forEach(circle => circle.classList.remove('highlighted'));\n\n        updateLinkButton(); // Ensure the button text is updated after linking/unlinking\n\n\n    }\n}\n\nfunction toggleComputeButton() {\n    const predictionInput = document.getElementById('predictionInput');\n    const outputNeuronInput = document.querySelector('.circle.green:last-child .number-box.large');\n    const computeButton = document.querySelector('button[name=\"compute\"]');\n\n    if (!predictionInput.value.trim() || !outputNeuronInput.value.trim()) {\n        // Hide button\n        computeButton.style.opacity = '0.5';\n        computeButton.disabled = true;\n    } else {\n        // Show button\n        computeButton.style.opacity = '1';\n        computeButton.disabled = false;\n    }\n}\n\n\nfunction updateLinkButton() {\n\n    const highlighted = document.querySelectorAll('.circle.highlighted');\n    const linkButton = document.getElementById('linkButton');\n\n    if (highlighted.length === 2) {\n        const layer1 = highlighted[0].dataset.layer;\n        const layer2 = highlighted[1].dataset.layer;\n        const ids = Array.from(highlighted).map(h => h.dataset.id);\n        const pairId = `${Math.min(...ids)}-${Math.max(...ids)}`;\n        const existingLine = document.querySelector(`.line[data-pair-id=\"${pairId}\"]`);\n\n        if (layer1 !== layer2) {\n            linkButton.textContent = existingLine ? 'Unlink' : 'Link';\n            linkButton.disabled = false;\n            linkButton.style.opacity = 1; // Button fully visible and active\n        } else {\n            linkButton.textContent = 'Link';\n            linkButton.disabled = true;\n            linkButton.style.opacity = 0.5; // Button disabled and faded out\n        }\n    } else {\n        linkButton.textContent = 'Link';\n        linkButton.disabled = true;\n        linkButton.style.opacity = 0.5; // Button disabled and faded out when less than two neurons are highlighted\n    }\n}\n\n// function areDifferentLayers(highlightedNodes) {\n//     if (highlightedNodes.length === 2) {\n//         return highlightedNodes[0].dataset.layer !== highlightedNodes[1].dataset.layer;\n//     }\n\n//     return false;\n// }\n\nfunction triggerCheckboxEvent(checkbox) {\n    //console.log('Triggering checkbox change');\n    var event = new Event('change', { 'bubbles': true });\n    checkbox.dispatchEvent(event);\n}\n\nfunction drawPermanentLines() {\n    //console.log(\"Attempting to draw permanent lines...\");\n    const inputGreenCircle = document.querySelector('.container .circle.green[data-id=\"1\"]');\n    const outputGreenCircle = document.querySelector('.container .circle.green[data-id=\"11\"]');\n\n    // Select hidden neurons for connection from the input neuron\n    const inputTargetNeurons = document.querySelectorAll('.grid .circle.hidden-layer[data-id=\"2\"], .grid .circle.hidden-layer[data-id=\"5\"], .grid .circle.hidden-layer[data-id=\"8\"]');\n    // Select hidden neurons for connection from the output neuron\n    const outputTargetNeurons = document.querySelectorAll('.grid .circle.hidden-layer[data-id=\"4\"], .grid .circle.hidden-layer[data-id=\"7\"], .grid .circle.hidden-layer[data-id=\"10\"]');\n\n    // Draw lines from the input neuron to its target hidden neurons\n    inputTargetNeurons.forEach(circle => {\n        drawLineBetweenCircles(inputGreenCircle, circle, `${inputGreenCircle.dataset.id}-${circle.dataset.id}`);\n    });\n\n    // Draw lines from the output neuron to its target hidden neurons\n    outputTargetNeurons.forEach(circle => {\n        drawLineBetweenCircles(outputGreenCircle, circle, `${outputGreenCircle.dataset.id}-${circle.dataset.id}`);\n    });\n\n    document.querySelectorAll('.line').forEach(line => {\n        line.style.display = 'block';\n    });\n}\n\nfunction drawLineBetweenCircles(circle1, circle2, pairId) {\n    const rect1 = circle1.getBoundingClientRect();\n    const rect2 = circle2.getBoundingClientRect();\n    const x1 = rect1.left + rect1.width / 2;\n    const y1 = rect1.top + rect1.height / 2;\n    const x2 = rect2.left + rect2.width / 2;\n    const y2 = rect2.top + rect2.height / 2;\n    const length = Math.hypot(x2 - x1, y2 - y1);\n    const angle = Math.atan2(y2 - y1, x2 - x1) * 180 / Math.PI;\n    const line = document.createElement('div');\n\n    line.className = 'line';\n    line.setAttribute('data-pair-id', pairId);\n    line.style.width = `${length}px`;\n    line.style.height = '6px'; // Ensure the line has visible thickness\n    line.style.backgroundColor = '#086B10';\n    line.style.position = 'absolute';\n    line.style.top = `${y1}px`;\n    line.style.left = `${x1}px`;\n    line.style.transform = `rotate(${angle}deg)`;\n    line.style.transformOrigin = '0 0';\n\n    document.body.appendChild(line); // Append line to a visible container\n\n    line.style.display = 'block';\n\n    updateLinkButton(); // Ensure button text updates after drawing a new line\n}\n\nfunction hidePopup(element) {\n    if (element.classList.contains('active')) {\n        element.style.animation = 'fadeOutScaleDown 0.5s forwards';\n        element.addEventListener('animationend', function () {\n            element.style.display = 'none';\n            element.classList.remove('active');\n            element.style.animation = ''; // Reset animation for next time\n        }, { once: true });\n    }\n}\n\nfunction hideTooHigh() {\n    const message = document.getElementById('tooHighMessage');\n    if (message && message.classList.contains('active')) {\n        message.style.animation = 'fadeOutScaleDown 0.5s forwards';\n        message.addEventListener('animationend', () => {\n            message.style.display = 'none';\n            message.classList.remove('active');\n        }, { once: true });\n    }\n}\n\nfunction hideTooLow() {\n    const message = document.getElementById('tooLowMessage');\n    if (message && message.classList.contains('active')) {\n        message.style.animation = 'fadeOutScaleDown 0.5s forwards';\n        message.addEventListener('animationend', () => {\n            message.style.display = 'none';\n            message.classList.remove('active');\n        }, { once: true });\n    }\n}\n\nfunction showPopup(element) {\n    element.style.display = 'block';\n    element.style.opacity = '1';\n    element.style.transform = 'scale(1)';\n    element.classList.add('active');\n}\n\nfunction setupScoreChangeListeners() {\n    const increaseButtons = document.querySelectorAll('.score-change[up-id]');\n    const decreaseButtons = document.querySelectorAll('.score-change[down-id]');\n\n    increaseButtons.forEach(button => {\n        button.addEventListener('click', function () {\n            const scoreId = this.getAttribute('up-id');\n            const scoreElement = document.querySelector(`.score[score-id=\"${scoreId}\"]`);\n            if (scoreElement) {\n                let currentScore = parseInt(scoreElement.textContent) || 0;\n                currentScore += 1;\n                scoreElement.textContent = currentScore;\n                handleNeuronUpdate(scoreId);\n                updateNeuronFills(); // Ensure fill updates after score changes\n                if (isAuthenticated) {\n                    updateScoreInDB(scoreId, currentScore);\n                }\n            }\n        });\n    });\n\n    decreaseButtons.forEach(button => {\n        button.addEventListener('click', function () {\n            const scoreId = this.getAttribute('down-id');\n            const scoreElement = document.querySelector(`.score[score-id=\"${scoreId}\"]`);\n            if (scoreElement) {\n                let currentScore = parseInt(scoreElement.textContent) || 0;\n                currentScore -= 1;\n                scoreElement.textContent = currentScore;\n                handleNeuronUpdate(scoreId);\n                updateNeuronFills(); // Ensure fill updates after score changes\n\n                if (isAuthenticated) {\n                    updateScoreInDB(scoreId, currentScore);\n                }\n            }\n        });\n    });\n}\n\nfunction setupBonusListeners() {\n    const add3Button = document.getElementById('add3');\n    // const add5Button = document.getElementById('add5');\n\n    add3Button.addEventListener('click', function () {\n        //console.log('+3 button clicked');\n        applyBonusToAllScores(3);\n        updateNeuronFills(); // Ensure fill updates after score changes\n\n    });\n\n    document.getElementById('add5').addEventListener('click', function () {\n        this.disabled = true; // Disable the button to prevent further clicks during processing\n        applyBonusToAllScores(5, () => {\n            this.disabled = false; // Re-enable the button after all operations are complete\n        });\n        updateNeuronFills(); // Ensure fill updates after score changes\n\n    });\n}\n\nfunction applyBonusToAllScores(bonus, completionCallback) {\n    const scores = document.querySelectorAll('.score');\n    let updatesPending = scores.length;\n\n    scores.forEach(scoreElement => {\n        let currentScore = parseInt(scoreElement.textContent) || 0;\n        scoreElement.textContent = currentScore + bonus;\n\n        const neuronId = scoreElement.closest('.circle').getAttribute('data-id');\n        updateScoreInDB(neuronId, scoreElement.textContent, () => {\n            updatesPending--;\n            if (updatesPending === 0) {\n                updateNeuronFills(); // Only update fills after all DB updates are complete\n                if (completionCallback) completionCallback(); // Call the completion callback if provided\n            }\n        });\n    });\n}\n\nfunction setupResultsPopupListeners() {\n    const resultPopup = document.getElementById('resultPopup');\n    const popupHeader = resultPopup.querySelector('.popup-header');\n    const closeButton = resultPopup.querySelector('.close-btn');\n    const resizeHandle = resultPopup.querySelector('.resize-handle');\n\n    closeButton.addEventListener('click', function () {\n        resultPopup.style.display = 'none';\n    });\n\n    // Dragging functionality\n    popupHeader.onmousedown = function (event) {\n        let shiftX = event.clientX - resultPopup.getBoundingClientRect().left;\n        let shiftY = event.clientY - resultPopup.getBoundingClientRect().top;\n\n        function movePopup(pageX, pageY) {\n            resultPopup.style.left = pageX - shiftX + 'px';\n            resultPopup.style.top = pageY - shiftY + 'px';\n        }\n\n        function onMouseMove(event) {\n            movePopup(event.pageX, event.pageY);\n        }\n\n        document.addEventListener('mousemove', onMouseMove);\n\n        document.onmouseup = function () {\n            document.removeEventListener('mousemove', onMouseMove);\n            document.onmouseup = null;\n        };\n    };\n\n    popupHeader.ondragstart = function () {\n        return false;\n    };\n\n    // Resize functionality\n    resizeHandle.onmousedown = function (event) {\n        event.preventDefault();\n        let startX = event.clientX;\n        let startY = event.clientY;\n        let startWidth = parseInt(document.defaultView.getComputedStyle(resultPopup).width, 10);\n        let startHeight = parseInt(document.defaultView.getComputedStyle(resultPopup).height, 10);\n\n        function onMouseMove(event) {\n            resultPopup.style.width = startWidth + event.clientX - startX + 'px';\n            resultPopup.style.height = startHeight + event.clientY - startY + 'px';\n        }\n\n        document.addEventListener('mousemove', onMouseMove);\n\n        document.onmouseup = function () {\n            document.removeEventListener('mousemove', onMouseMove);\n            document.onmouseup = null;\n        };\n    };\n}\n\nfunction displayResults() {\n    const predictionInput = document.getElementById('predictionInput');\n    const outputNeuronInput = document.querySelector('.circle.green:last-child .number-box.large');\n    const predictionValue = parseFloat(predictionInput.value);\n    const outputValue = parseFloat(outputNeuronInput.value);\n    const neurons = document.querySelectorAll('.circle.hidden-layer');\n    let resultsHtml = '<table><thead><tr><th>Name</th><th>Value</th><th>Status</th></tr></thead><tbody>';\n\n    // Loop through each neuron and determine its status\n    neurons.forEach(neuron => {\n        const neuronValue = neuron.querySelector('.number-box.large').value;\n        const neuronName = neuron.querySelector('.number-box.small').value;\n        let status = 'ON PAR'; // Default status\n\n        if (neuronValue > predictionValue) {\n            status = 'TOO HIGH';\n        } else if (neuronValue < predictionValue) {\n            status = 'TOO LOW';\n        }\n\n        // Append row for each neuron in the results table\n        resultsHtml += `<tr><td>${neuronName}</td><td>${neuronValue}</td><td>${status}</td></tr>`;\n    });\n\n    resultsHtml += '</tbody></table>';\n    let overallStatus = ''; // or any initial value that suits your needs\n\n    // Determine overall status based on output value\n    if (outputValue > predictionValue) {\n        overallStatus = 'Output: Too High';\n    } else if (outputValue < predictionValue) {\n        overallStatus = 'Output: Too Low';\n    } else {\n        overallStatus = 'Output: On Par';\n    }\n\n    // Update the overall status message\n    document.getElementById('highLowMessage').textContent = overallStatus;\n\n    // Update the HTML content of the results table container\n    document.getElementById('resultsTableContainer').innerHTML = resultsHtml;\n\n    // Show the result popup\n    showPopup(document.getElementById('resultPopup'));\n}\n\n// function animateScore(scoreElement, newScore, callback) {\n//     let currentScore = parseInt(scoreElement.textContent);\n//     const duration = 500; // Duration of the animation in milliseconds\n//     const frameRate = 10; // Duration between each update\n//     const totalFrames = duration / frameRate;\n//     const increment = (newScore - currentScore) / totalFrames;\n\n//     let frame = 0;\n//     const counter = setInterval(() => {\n//         frame++;\n//         currentScore += increment;\n//         scoreElement.textContent = Math.floor(currentScore);\n//         if (frame === totalFrames) {\n//             scoreElement.textContent = newScore; // Ensures it ends on the exact value\n//             clearInterval(counter);\n//             scoreElement.classList.remove('score-animate');\n//             if (callback) callback(); // Execute callback after animation completes\n//         }\n//     }, frameRate);\n\n//     scoreElement.classList.add('score-animate');\n// }\n\nfunction resizeText() {\n    const smallBoxes = document.querySelectorAll('.number-box.small');\n\n    smallBoxes.forEach(box => {\n        // Clone the box to measure the text width without affecting the original content\n        const clone = box.cloneNode(true);\n        clone.style.visibility = 'hidden'; // Hide the clone\n        clone.style.position = 'absolute'; // Position it off-screen\n        clone.style.left = '-9999px';\n        document.body.appendChild(clone);\n\n        // Measure the width of the text within the clone\n        const cloneWidth = clone.offsetWidth;\n\n        // Calculate the ratio between the box width and the clone width\n        const ratio = box.offsetWidth / cloneWidth;\n\n        // Calculate the new font size based on the ratio\n        const fontSize = parseFloat(window.getComputedStyle(box).fontSize);\n        const newFontSize = fontSize * ratio;\n\n        // Apply the new font size to the original box\n        box.style.fontSize = newFontSize + 'px';\n\n        // Remove the clone from the document\n        document.body.removeChild(clone);\n    });\n}\n\nfunction setupResetTickboxesButton() {\n    const resetTicksButton = document.getElementById('reset-ticks');\n    if (resetTicksButton) {\n        resetTicksButton.addEventListener('click', function () {\n            const checkboxes = document.querySelectorAll('.checkbox');\n            checkboxes.forEach(checkbox => {\n                checkbox.checked = false;\n                triggerCheckboxEvent(checkbox);\n            });\n        });\n    }\n}\n\nfunction updateNeuronFills() {\n    const neurons = document.querySelectorAll('.circle');\n    const maxScore = parseInt(document.getElementById('score-range-max').textContent);\n\n    neurons.forEach(neuron => {\n        const scoreElement = neuron.querySelector('.score');\n        const score = parseInt(scoreElement.textContent) || 0;\n        const targetFillHeight = Math.min(100, (score / maxScore) * 100);\n\n        // Immediately set fill height to 0% to reset it\n        if (score === 0) {\n            neuron.querySelector('.fill').style.height = '0%';\n            return; // Skip further processing if score is zero\n        }\n\n        // Directly set the fill height without animation\n        neuron.querySelector('.fill').style.height = `${targetFillHeight}%`;\n    });\n}\n\nfunction setupMaxScoreButtons() {\n    // Get the max score label and buttons\n    const maxScoreLabel = document.getElementById('score-range-max');\n    const incrementButton = document.getElementById('score-range-inc');\n    const decrementButton = document.getElementById('score-range-dec');\n\n    // Set initial max score\n    let maxScore = 30; // Default max score\n    maxScoreLabel.textContent = maxScore;\n\n    // Increment max score\n    incrementButton.addEventListener('click', () => {\n        maxScore += 5;  // Increment by 5 or another value you deem appropriate\n        maxScoreLabel.textContent = maxScore;\n        updateNeuronFills();  // Update fills to reflect new max score\n    });\n\n    // Decrement max score\n    decrementButton.addEventListener('click', () => {\n        if (maxScore > 5) { // Prevent max score from going below a minimum value, e.g., 5\n            maxScore -= 5;\n            maxScoreLabel.textContent = maxScore;\n            updateNeuronFills();  // Update fills to reflect new max score\n        }\n    });\n\n}\n\nfunction setupSettingButton() {\n    const settingsIcon = document.getElementById('settings-icon');\n    const buttonsToToggle = [\n        document.getElementById('reset-scores'),\n        document.getElementById('reset-ticks'),\n        document.getElementById('score-range-max'),\n        document.getElementById('score-range-dec'),\n        document.getElementById('score-range-inc'),\n        document.getElementById('save-game'),\n        document.getElementById('load-game'),\n\n    ];\n\n\n    settingsIcon.addEventListener('click', function () {\n        // Add wobble animation\n        this.classList.add('wobble');\n        setTimeout(() => {\n            this.classList.remove('wobble');\n        }, 500); // Match the duration of the animation\n\n        // Toggle visibility of the buttons\n        buttonsToToggle.forEach(button => {\n            if (button.style.display === 'none') {\n                button.style.display = ''; // Show the button if it was hidden\n            } else {\n                button.style.display = 'none'; // Hide the button if it was shown\n            }\n        });\n    });\n\n}\n\n\nasync function saveGameState() {\n    // Define options for the save file picker\n    const options = {\n        types: [\n            {\n                description: 'Text Files',\n                accept: { 'text/plain': ['.txt'] },\n            },\n        ],\n    };\n\n    // Data collection for input and output neurons\n    const inputOutputNeurons = document.querySelectorAll('.circle.green');\n    let line1 = '';\n    inputOutputNeurons.forEach(neuron => {\n        const smallInput = neuron.querySelector('.number-box.small') ? neuron.querySelector('.number-box.small').value : 'N/A';\n        let largeInput = 'N/A';\n        if (neuron.dataset.id === '1') { // Specific handling for input neuron with different class for large input box\n            largeInput = neuron.querySelector('.secret-box.large') ? neuron.querySelector('.secret-box.large').value : 'N/A';\n        } else { // General handling for other neurons, assuming output is similar to hidden ones\n            largeInput = neuron.querySelector('.number-box.large') ? neuron.querySelector('.number-box.large').value : 'N/A';\n        }\n        const score = neuron.querySelector('.score') ? neuron.querySelector('.score').textContent : '0';\n        line1 += `${smallInput}; ${largeInput}; ${score}; `;\n    });\n\n    // Data collection for hidden neurons with links\n    const hiddenNeurons = document.querySelectorAll('.circle.hidden-layer');\n    let line2 = '';\n    hiddenNeurons.forEach(neuron => {\n        const smallInput = neuron.querySelector('.number-box.small') ? neuron.querySelector('.number-box.small').value : 'N/A';\n        const largeInput = neuron.querySelector('.number-box.large') ? neuron.querySelector('.number-box.large').value : 'N/A';\n        const score = neuron.querySelector('.score') ? neuron.querySelector('.score').textContent : '0';\n        // Logic to determine link IDs; adjust as per actual link handling\n        const links = getLinks(neuron);\n        line2 += `${smallInput}; ${largeInput}; ${score}; ${links.left}; ${links.right}; `;\n    });\n\n    // Combining the data into the final format\n    const data = `${line1.trim()}\\n${line2.trim()}`;\n\n    // Attempt to save the file using the File System Access API\n    try {\n        const handle = await window.showSaveFilePicker(options);\n        const writableStream = await handle.createWritable();\n        await writableStream.write(data);\n        await writableStream.close();\n        alert('File saved successfully!');\n    } catch (err) {\n        console.error('Failed to save file:', err);\n        alert('Failed to save file.');\n    }\n}\n\n// TO DESIGN AND ADD - Example function to fetch link data, adjust based on actual link data management\nfunction getLinks(neuron) {\n    const links = { left: '', right: '' }; // Placeholder for link ids\n    // Logic to populate links.left and links.right based on application's link handling\n    return links;\n}\n\nfunction setLinks(neuron, leftId, rightId) {\n    // Implement link setting logic based on application's requirements\n}\n\nasync function loadGameState() {\n    // Define options for the file picker\n    const options = {\n        types: [\n            {\n                description: 'Text Files',\n                accept: { 'text/plain': ['.txt'] },\n            },\n        ],\n    };\n\n    try {\n        const [fileHandle] = await window.showOpenFilePicker(options);\n        const file = await fileHandle.getFile();\n        const fileContent = await file.text();\n\n        // Process the file content\n        const lines = fileContent.split('\\n'); // Split the file content into lines\n        const inputOutputLine = lines[0].split(';').map(item => item.trim()); // Split first line into parts\n        const hiddenNeuronsLine = lines[1].split(';').map(item => item.trim()); // Split second line into parts\n\n        const inputOutputNeurons = document.querySelectorAll('.circle.green');\n        inputOutputNeurons.forEach((neuron, index) => {\n            const baseIndex = index * 3;\n            if (neuron.dataset.id === '1') {\n                neuron.querySelector('.number-box.small').value = inputOutputLine[baseIndex];\n                neuron.querySelector('.secret-box.large').value = inputOutputLine[baseIndex + 1];\n            } else {\n                neuron.querySelector('.number-box.small').value = inputOutputLine[baseIndex];\n                neuron.querySelector('.number-box.large').value = inputOutputLine[baseIndex + 1];\n            }\n            neuron.querySelector('.score').textContent = inputOutputLine[baseIndex + 2];\n        });\n\n        const hiddenNeurons = document.querySelectorAll('.circle.hidden-layer');\n        hiddenNeurons.forEach((neuron, index) => {\n            const baseIndex = index * 5;\n            neuron.querySelector('.number-box.small').value = hiddenNeuronsLine[baseIndex];\n            neuron.querySelector('.number-box.large').value = hiddenNeuronsLine[baseIndex + 1];\n            neuron.querySelector('.score').textContent = hiddenNeuronsLine[baseIndex + 2];\n            // TO BE ADDED - Presently assuming `setLinks` is a function to update neuron links visually or logically\n            setLinks(neuron, hiddenNeuronsLine[baseIndex + 3], hiddenNeuronsLine[baseIndex + 4]);\n        });\n\n        alert('File loaded successfully!');\n        loadAllNeuronData();\n\n    } catch (err) {\n        console.error('Failed to load file:', err);\n        alert('Failed to load file.');\n    }\n}\n\nfunction handleNeuronUpdate(neuronId) {\n    const neuronElement = document.querySelector(`.circle[data-id=\"${neuronId}\"]`);\n\n    if (neuronElement) {\n        const labelScoreElement = neuronElement.querySelector('.score');\n        const numberBoxSmallElement = neuronElement.querySelector('.number-box.small');\n        const numberBoxLargeElement = neuronElement.querySelector('.number-box.large');\n\n        if (labelScoreElement) {\n            const updateScore = () => {\n                if (isAuthenticated) {\n                    setNeuronData(neuronId, 'labelScore', labelScoreElement.textContent || labelScoreElement.value);\n                }\n                updateNeuronFills(); // Ensure fill updates after score changes\n            };\n            if (labelScoreElement.isContentEditable) {\n                labelScoreElement.addEventListener('input', updateScore);\n            } else {\n                labelScoreElement.addEventListener('change', updateScore);\n            }\n        }\n\n        if (numberBoxSmallElement) {\n            numberBoxSmallElement.disabled = !isAuthenticated;\n            numberBoxSmallElement.addEventListener('input', () => {\n                if (isAuthenticated) {\n                    setNeuronData(neuronId, 'small', numberBoxSmallElement.value);\n                }\n                updateNeuronFills(); // Ensure fill updates after small box changes\n            });\n        }\n\n        if (numberBoxLargeElement) {\n            numberBoxLargeElement.addEventListener('input', () => {\n                if (isAuthenticated) {\n                    setNeuronData(neuronId, 'large', numberBoxLargeElement.value);\n                }\n                updateNeuronFills(); // Ensure fill updates after large box changes\n            });\n        }\n    } else {\n        console.log(`Neuron with ID ${neuronId} not found in the DOM.`);\n    }\n}\n\n// Listening for changes in neuron data\nfunction listenForNeuronChanges(neuronId) {\n    //const db = firebase.database();\n    const neuronRef = window.db.ref('neurons/' + neuronId);\n    neuronRef.on('value', (snapshot) => {\n        const data = snapshot.val();\n        if (data) {\n            updateNeuronDisplay(neuronId, data);  // Updates neuron display based on data\n            updateNeuronFills();  // Ensures fill updates after data changes\n        }\n    });\n}\n\n\n\n// Function to update the DOM based on the neuron data\nfunction updateNeuronDisplay(neuronId, data) {\n    const neuronElement = document.querySelector(`.circle[data-id=\"${neuronId}\"]`);\n    if (!neuronElement) {\n        console.error('Neuron with ID', neuronId, 'not found in the DOM.');\n        return;\n    }\n\n    // Update large and small number inputs\n    const largeInput = neuronElement.querySelector('input.number-box.large');\n    const smallInput = neuronElement.querySelector('input.number-box.small');\n    const scoreElement = neuronElement.querySelector('.score');\n    const fillElement = neuronElement.querySelector('.fill'); // Ensure this selector matches HTML\n\n\n    if (largeInput && data.large !== undefined) {\n        largeInput.value = data.large;\n    }\n    if (smallInput && data.small !== undefined) {\n        smallInput.value = data.small;\n    }\n    if (scoreElement && data.score !== undefined) {\n        scoreElement.textContent = data.score;\n    }\n    if (data.fill !== undefined && fillElement) {\n        fillElement.style.height = `${data.fill}%`; // Update fill based on the percentage stored in the database\n    }\n}\n\n// function saveNeuronData(neuronId, data) {\n//     const dbRef = window.db.ref('neurons/' + neuronId);\n//     dbRef.set(data).then(() => {\n//         console.log(\"Neuron data saved successfully!\");\n//     }).catch((error) => {\n//         console.error(\"Error saving neuron data:\", error);\n//     });\n// }\n\nfunction setupNeuronListeners() {\n    // Selects all neuron elements including input, hidden-layer, and output neurons\n    document.querySelectorAll('.circle').forEach(neuron => {\n        const neuronId = neuron.getAttribute('data-id');\n        if (!neuronId) {\n            console.error('Neuron element missing data-id', neuron);\n            return;\n        }\n\n        // Listeners for number inputs (large and small)\n        neuron.querySelectorAll('input.number-box').forEach(input => {\n            input.addEventListener('input', function () {\n                const inputType = this.classList.contains('large') ? 'large' : 'small';\n                const inputValue = this.value.trim(); // Protect against empty strings\n\n                // Only proceed if input value is not empty\n                if (inputValue) {\n                    updateNeuronData(neuronId, inputType, inputValue);\n                }\n            });\n        });\n\n        // Listener for score changes, assuming the score is directly editable or within an input/label\n        const scoreElement = neuron.querySelector('.score');\n        if (scoreElement) {\n            new MutationObserver((mutations) => {\n                mutations.forEach(mutation => {\n                    if (mutation.type === 'characterData' || mutation.type === 'childList') {\n                        const score = parseInt(scoreElement.textContent || scoreElement.value, 10);\n\n                        // Protect against NaN values\n                        if (!isNaN(score)) {\n                            updateNeuronData(neuronId, 'score', score);\n                            //updateNeuronFills();\n                        }\n                    }\n                });\n            }).observe(scoreElement, { characterData: true, childList: true, subtree: true });\n\n            //updateNeuronFills(); \n        }\n    });\n}\n\n\n// Function to update neuron data in the database\nfunction updateNeuronData(neuronId, inputType, inputValue) {\n    if (!isAuthenticated) {\n        console.warn(`Update skipped for neuron ${neuronId} due to authentication status`);\n        return;\n    }\n\n    const neuronRef = window.db.ref('neurons/' + neuronId);\n\n    const updates = {};\n    updates[inputType] = inputValue;\n\n    neuronRef.update(updates)\n        .then(() => {\n            console.log('Data updated successfully for neuron:', neuronId);\n            updateNeuronFills(); // Ensure fill updates after data changes\n        })\n        .catch((error) => {\n            console.error('Failed to update data for neuron:', neuronId, error);\n        });\n}\n\nfunction loadAllNeuronData() {\n    //const db = firebase.database();\n    const neuronsRef = window.db.ref('neurons');\n\n    neuronsRef.on('value', (snapshot) => {\n        const data = snapshot.val();\n        if (data) {\n            Object.keys(data).forEach(neuronId => {\n                console.log('Updating each neuron');\n                const neuronData = data[neuronId];\n                console.log('Done updating each neuron');\n\n                updateNeuronDisplay(neuronId, neuronData);\n            });\n            updateNeuronFills(); // Ensure fill colors are updated after all data is loaded\n        } else {\n            console.log('No neuron data available');\n        }\n    });\n}\n\n\nfunction initializeNeuronDataInDB() {\n    //const db = firebase.database();\n    console.log('Have db', window.db);\n\n    document.querySelectorAll('.circle').forEach(neuron => {\n        const neuronId = neuron.getAttribute('data-id');\n        const smallInput = neuron.querySelector('input.number-box.small').value.trim();\n        const score = neuron.querySelector('.score').textContent.trim();\n\n        // Construct the neuron data object\n        const neuronData = {\n            large: '',  // Use 'N/A' or similar if input is empty\n            small: smallInput || 'N/A',  // Use 'N/A' or similar if input is empty\n            score: score || '0'         // Default score to '0' if empty\n        };\n\n        // Set data in Firebase, overriding any existing data\n        console.log('Accessing Firedb');\n        set(window.db.ref('neurons/' + neuronId), neuronData);\n        console.log('Done accessing Firedb');\n\n    });\n}\n\nfunction updateScoreInDB(neuronId, newScore) {\n    if (!isAuthenticated) {\n        console.warn(`Score update skipped for neuron ${neuronId} due to authentication status`);\n        return;\n    }\n\n    const neuronRef = window.db.ref('neurons/' + neuronId);\n    const maxScore = parseInt(document.getElementById('score-range-max').textContent);\n    const fillPercentage = Math.min(100, (newScore / maxScore) * 100);\n\n    const updates = {\n        score: newScore,\n        fill: fillPercentage\n    };\n\n    neuronRef.update(updates)\n        .then(() => {\n            console.log('Score and fill updated successfully for neuron:', neuronId);\n            updateNeuronFills(); // Ensure fill updates after score changes\n        })\n        .catch((error) => {\n            console.error('Failed to update score and fill for neuron:', neuronId, error);\n        });\n}\n\n\n// function updateScoreAndFill(neuronId, newScore) {\n//     const maxScore = parseInt(document.getElementById('score-range-max').textContent);\n//     const fillPercentage = Math.min(100, (newScore / maxScore) * 100);\n\n//     const updates = {\n//         score: newScore,\n//         fill: fillPercentage\n//     };\n\n//     console.log('Accessing Firedb');\n\n\n//     const neuronRef = window.db.ref('neurons/' + neuronId);\n//     set(neuronRef, updates); // TO CHECK AND UPDATE\n// }\n\n// function applyNeuronDataFromDB(neuronId, data) {\n//     const neuronElement = document.querySelector(`.circle[data-id=\"${neuronId}\"]`);\n//     if (!neuronElement) {\n//         console.error(\"Neuron with ID\", neuronId, \"not found\");\n//         return;\n//     }\n\n//     const scoreElement = neuronElement.querySelector('.score');\n//     const fillElement = neuronElement.querySelector('.fill'); // Ensure this selector matches your fill element\n\n//     if (scoreElement && fillElement && data.fill !== undefined) {\n//         scoreElement.textContent = data.score; // Update score text\n//         fillElement.style.height = `${data.fill}%`; // Apply fill percentage from the database\n//     }\n// }\n\nfunction checkAuthState() {\n    const signInButton = document.getElementById('sign-in');\n    const signOutButton = document.getElementById('sign-out');\n    const status = document.getElementById('sign-in-status');\n    const mainContent = document.getElementById('main-content');\n\n    window.auth.onAuthStateChanged(user => {\n        if (user) {\n            status.textContent = `Signed in as ${user.displayName}`;\n            signInButton.style.display = 'none';\n            signOutButton.style.display = 'block';\n            mainContent.style.display = 'block';\n            isAuthenticated = true; // Set authenticated to true\n            drawPermanentLines(); // Draw lines when user is signed in\n            loadAllNeuronData(); // Ensure neuron data is loaded on sign-in\n        } else {\n            status.textContent = 'Signed out';\n            signInButton.style.display = 'block';\n            signOutButton.style.display = 'none';\n            isAuthenticated = false; // Set authenticated to false\n            if (!show_main_content) {\n                mainContent.style.display = 'none';\n            } else {\n                drawPermanentLines(); // Draw lines for testing when not signed in\n            }\n            console.log(\"checkAuthState: User is signed out\");\n        }\n    });\n    \n}\n\n// Initialize the FedCM API with FedCM enabled\nfunction initializeFedCM() {\n    if (typeof google !== 'undefined' && google.accounts && google.accounts.id) {\n        google.accounts.id.initialize({\n            client_id: '786766490817-dr5go1indng9pokg2q7f1ghn93ubeoul.apps.googleusercontent.com',\n            callback: handleCredentialResponse,\n            use_fedcm_for_prompt: true // Enable FedCM\n        });\n\n        // Optionally, show the One Tap prompt automatically\n        google.accounts.id.prompt();\n        console.log(\"initializeFedCM: One Tap prompt automatically shown\");\n\n    } else {\n        console.error('Google Identity Services library not loaded.');\n    }\n}\n\nfunction handleCredentialResponse(response) {\n    console.log(\"Encoded JWT ID token: \" + response.credential);\n    // handle the credential, send it to backend for verification\n}\n\n\n// function toggleLinesVisibility(isVisible) {\n//     const lines = document.querySelectorAll('.line');\n//     lines.forEach(line => {\n//         line.style.display = isVisible ? 'block' : 'none';\n//     });\n// }  \n\nfunction setNeuronData(data) {\n    // TO BE ADDED\n}\n\nfunction set(value) {\n    // TO BE ADDED\n}\n\nfunction showWelcomePopup() {\n    const welcomePopup = document.querySelector('.popup4');\n    const mainContent = document.getElementById('main-content');\n    if (welcomePopup && mainContent) {\n        mainContent.style.display = 'block'; // Ensure main-content is visible\n        console.log(\"Showing welcome popup\");\n        welcomePopup.style.setProperty('display', 'block', 'important');\n        welcomePopup.style.setProperty('opacity', '1', 'important');\n        welcomePopup.style.setProperty('transform', 'translateY(0px) scale(1)', 'important');\n    }\n}\n\nfunction hideWelcomePopup() {\n    const welcomePopup = document.querySelector('.popup4');\n    if (welcomePopup) {\n        welcomePopup.style.animation = 'fadeOutScaleDown 0.5s forwards';\n        welcomePopup.addEventListener('animationend', function () {\n            welcomePopup.style.setProperty('display', 'none', 'important');\n            welcomePopup.style.setProperty('opacity', '0', 'important');\n            welcomePopup.style.setProperty('transform', 'translateY(-10px) scale(0.95)', 'important');\n        }, { once: true });\n    }\n}\n\n\n\n\nconsole.log(\"apps-scripts loaded\");\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GoogleOAuthProvider, useGoogleLogin } from '@react-oauth/google';\nimport './js/config.js';\nimport './js/firebaseInit.js';\nimport './js/app-scripts.js';\n\nconsole.log(\"index.js Headers and Imports loaded - React, Auth, firebase and app scripts \");\n\n// Google OneTapLogin\nconst OneTapLogin = () => {\n    const login = useGoogleLogin({\n        onSuccess: tokenResponse => {\n            console.log(\"Login successful:\", tokenResponse);\n        },\n        onError: errorResponse => {\n            console.error(\"Login failed:\", errorResponse);\n        },\n        ux_mode: 'popup',\n    });\n\n    return (\n        <button onClick={() => login()}>Sign in with Google</button>\n    );\n};\n\nconst App = () => (\n    <GoogleOAuthProvider clientId=\"786766490017-dr5go1indng9pokg2q7f1ghn93ubeoul.apps.googleusercontent.com\">\n        <OneTapLogin />\n    </GoogleOAuthProvider>\n);\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nconsole.log(\"index.js loaded\");\n\n","/* global firebase */\n/*\nSecurity Note: Firebase configuration does not contain any sensitive information.\nThe actual authentication is handled by Firebase's servers.\nCHANGE THESE TO YOUR OWN FIREBASE.\n*/\n\nwindow.onload = function() {\n\n  const firebaseConfig = {\n    apiKey: \"AIzaSyD_potT3TgBJvHKhhPSKNQ-kR84BPfdBu8\",\n    authDomain: \"braintrain-3bf0f.firebaseapp.com\",\n    databaseURL: \"https://braintrain-3bf0f-default-rtdb.firebaseio.com\",\n    projectId: \"braintrain-3bf0f\",\n    storageBucket: \"braintrain-3bf0f.appspot.com\",\n    messagingSenderId: \"786766490017\",\n    appId: \"1:786766490017:web:2e11eb3f0b450ad9b503e0\",\n    measurementId: \"G-BSCSQCBFQW\"\n  };\n\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n\n  // Make firebase globally accessible\n  window.firebase = firebase;\n\n  // Make Firebase services globally accessible\n  window.auth = firebase.auth();\n  window.db = firebase.database();\n  window.GoogleAuthProvider = new firebase.auth.GoogleAuthProvider();\n\n  console.log(\"firebaseInit.js loaded\", window.auth);\n\n  // Signal that Firebase is ready\n  window.firebaseReady = true;\n\n  // Dispatch custom event indicating Firebase is ready\n  const firebaseReadyEvent = new Event('firebaseReady');\n  document.dispatchEvent(firebaseReadyEvent);\n\n  // Initialize FedCM\n  if (window.PublicKeyCredential) {\n    navigator.credentials.get({\n        mediation: 'optional',\n        federated: {\n            providers: [\n                {\n                    url: 'https://accounts.google.com'\n                }\n            ]\n    }\n    }).then(credential => {\n        if (credential) {\n            handleCredentialResponse(credential);\n        }\n    }).catch(err => {\n        console.error(\"FedCM error: \", err);\n    });\n} else {\n    console.error(\"FedCM not supported\");\n}\n\nfunction handleCredentialResponse(credential) {\n    const assertionResponse = credential.response;\n    if (assertionResponse) {\n        const credentialId = assertionResponse.id;\n        firebase.auth().signInWithCredential(firebase.auth.GoogleAuthProvider.credential(credentialId))\n            .then(result => {\n                console.log(\"User signed in with FedCM:\", result.user);\n                return result.user.getIdToken();\n            })\n            .then(token => {\n                console.log(\"Token retrieved successfully:\", token);\n                const userId = firebase.auth().currentUser.uid;\n                return firebase.database().ref('/neurons/' + userId).once('value');\n            })\n            .then(snapshot => {\n                const neuronData = snapshot.val();\n                console.log(\"Neuron data retrieved from database:\", neuronData);\n                updateNeurons(neuronData);\n            })\n            .catch(error => {\n                console.error(\"Error during sign-in or data retrieval:\", error);\n            });\n    } else {\n        console.log(\"No assertion response received or response is invalid\");\n    }\n}\n\n// Existing function to update neurons in the UI\nfunction updateNeurons(neuronData) {\n    // Your existing code to update neurons in the UI\n}\n};"],"sourceRoot":""}